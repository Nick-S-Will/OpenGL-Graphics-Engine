#version 330 // OpenGL version 3.3
#define LIGHT_COUNT 1

const int DIRECTIONAL_LIGHT = 0;
const int POINT_LIGHT = 1;
const int SPOT_LIGHT = 2;

struct Material
{
	float specularStrength;
	sampler2D diffuseTexture;
	sampler2D specularTexture;
	sampler2D normalTexture;
};

struct Light
{
	vec3 position;
	vec3 direction;
	vec3 color;
	vec3 specularColor;

	float constant;
	float linear;
	float quadratic;

	float coneAngle;
	float persistence;
	int type;
	bool isEnabled;
};

in mat4 retWorld;
in vec3 retPos;
in vec3 retNormal;
in vec2 retTexCoord;
in vec3 retViewDirection;
in mat3 retTBN;

uniform Material material;
uniform Light lights[LIGHT_COUNT];
uniform vec3 ambientColor;
uniform bool NormalMapsEnabled;

out vec4 FragColor;

vec3 getLitColor(Light light, float alignmentThreshold, float alignmentFactor, vec3 diffuseColor)
{
	if (light.type == SPOT_LIGHT && alignmentThreshold > alignmentFactor) return vec3(0.f);

	vec3 directionToLight = light.type == DIRECTIONAL_LIGHT ? -light.direction : normalize(light.position - retPos);
	vec3 normal = retNormal;
	if (NormalMapsEnabled)
	{
		normal = texture(material.normalTexture, retTexCoord).rgb;
		normal = normal * 2.0 - 1.0;
		normal = normalize(retTBN * normal);
	}

	float lambertianStrength = dot(directionToLight, normal);
	vec3 lambertian = lambertianStrength * diffuseColor * light.color;

	vec3 refl = reflect(-directionToLight, normal);
	float specularStrength = pow(max(dot(refl, retViewDirection), 0.f), material.specularStrength);
	vec3 specular = specularStrength * texture(material.specularTexture, retTexCoord).rgb * light.specularColor;

	vec3 litColor = lambertian + specular;
	if (light.type == SPOT_LIGHT)
	{
		float lightDistance = length(light.position - retPos);
		float attenuation = 1.f / (light.constant + light.linear * lightDistance + light.quadratic * (lightDistance * lightDistance));
		attenuation *= 1 - pow(clamp(alignmentThreshold / alignmentFactor, 0.f, 1.f), light.persistence);
		litColor *= attenuation;
	}

	return litColor;
}

void main()
{
	vec4 diffuseColor = texture(material.diffuseTexture, retTexCoord);
	if (diffuseColor.a == 0) discard;

	vec3 color = diffuseColor.rgb * ambientColor;
	for (int i = 0; i < LIGHT_COUNT; i++)
	{
		if (!lights[i].isEnabled) continue;

		vec3 lightDirectionToPixel = normalize(retPos - lights[i].position);
		float alignmentThreshold = cos(lights[i].coneAngle);
		float alignmentFactor = dot(normalize(lights[i].direction), lightDirectionToPixel);
		color += getLitColor(lights[i], alignmentThreshold, alignmentFactor, diffuseColor.rgb);
	}
	
	FragColor = vec4(color, diffuseColor.a);
}