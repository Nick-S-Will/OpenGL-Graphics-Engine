#version 330

const float offset = 1.f / 300.f;
const vec2 offsets[9] = vec2[] (
	vec2(-offset, offset),	vec2(0.f, offset),	vec2(offset, offset),
	vec2(-offset, 0.f),		vec2(0.f, 0.f),		vec2(offset, 0.f),
	vec2(-offset, -offset), vec2(0.f, -offset), vec2(offset, -offset)
);
const float blurKernel[9] = float[] (
	1.f / 16.f, 2.f / 16.f, 1.f / 16.f,
	2.f / 16.f, 4.f / 16.f, 2.f / 16.f,
	1.f / 16.f, 2.f / 16.f, 1.f / 16.f
);
const float sharpKernel[9] = float[] (
	-1.f, -1.f, -1.f,
	-1.f,  9.f, -1.f,
	-1.f, -1.f, -1.f
);
const float edgeDetectionKernel[9] = float[] (
	1.f,  1.f, 1.f,
	1.f, -8.f, 1.f,
	1.f,  1.f, 1.f
);
const float pi = 3.14159f;

const int NO_EFFECT = 0;
const int INVERTED_EFFECT = 1;
const int GRAYSCALE_EFFECT = 2;
const int BLUR_EFFECT = 3;
const int SHARP_EFFECT = 4;
const int EDGE_EFFECT = 5;
const int RAINBOW_EFFECT = 6;

in vec2 retTexCoords;

uniform sampler2D screenTexture;
uniform float time;
uniform int effectType;

out vec4 FragColor;

vec3 getBaseColor()
{
	return texture(screenTexture, retTexCoords).rgb;
}

vec3 getInvertedColor()
{
	return vec3(1.f) - getBaseColor();
}

vec3 getGrayscaleColor()
{
	vec3 color = getBaseColor();
	float weightedAverage = (0.2126f * color.r) + (0.7152f * color.g) + (0.0722f * color.b);

	return vec3(weightedAverage);
}

vec3 getKernelSampledColor(float kernel[9])
{
	vec3 color = vec3(0.f);
	for (int i = 0; i < 9; i++)
	{
		color += vec3(texture(screenTexture, retTexCoords + offsets[i])) * kernel[i];
	}

	return color;
}

vec3 getRainbowColor()
{
	vec3 color = getBaseColor();
	if (color.r + color.g + color.b < .1) return color;

	float r = cos(time) / 2.f + .5f;
	float g = cos(time + 4.f / 3.f * pi) / 2.f + .5f;
	float b = cos(time + 2.f / 3.f * pi) / 2.f + .5f;

	return mix(vec3(r, g, b), color, .75f);
}

void main()
{
	vec3 color;
	switch (effectType)
	{
	case INVERTED_EFFECT: color = getInvertedColor(); break;
	case GRAYSCALE_EFFECT: color = getGrayscaleColor(); break;
	case BLUR_EFFECT: color = getKernelSampledColor(blurKernel); break;
	case SHARP_EFFECT: color = getKernelSampledColor(sharpKernel); break;
	case EDGE_EFFECT: color = getKernelSampledColor(edgeDetectionKernel); break;
	case RAINBOW_EFFECT: color = getRainbowColor(); break;
	default: color = getBaseColor(); break;
	}

	FragColor = vec4(color, 1.f);
}