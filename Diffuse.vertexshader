#version 330 // OpenGL version 3.3

in vec3 vertices;
in vec3 normals;
in vec3 tangents;
in vec3 bitangents;
in vec2 texCoords;
layout (location = 10) in mat4 instanceMatrix;

uniform mat4 World;
uniform mat4 WVP;
uniform vec3 CameraPosition;
uniform bool InstancingEnabled;

out vec3 retPos;
out vec3 retNormal;
out vec2 retTexCoord;
out vec3 retViewDirection;
out mat3 retTBN;

void main()
{
	gl_Position = InstancingEnabled ? WVP * instanceMatrix * vec4(vertices, 1.0) : WVP * vec4(vertices, 1.0);

	mat4 world = InstancingEnabled ? World * instanceMatrix : World;
	retPos = vec3(world * vec4(vertices, 1.0f));
	retNormal = normalize(mat3(transpose(inverse(world))) * normals);
	retTexCoord = texCoords;
	retViewDirection = normalize(CameraPosition - retPos);

	vec3 t = normalize(vec3(world * vec4(tangents, 0.f)));
	vec3 b = normalize(vec3(world * vec4(bitangents, 0.f)));
	vec3 n = normalize(vec3(world * vec4(normals, 0.f)));
	retTBN = mat3(t, b, n);
}